{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Project Eclipse Docs The guides on this website are hosted as a part of the Milyli Github account and made available via GitHub Pages. They are meant to help you get up and running with Project Eclipse Server Alpha and Beta. For any questions pertaining to these guides, Project Eclipse, or, if you want to learn more please contact the following individuals by email: Tim Randall, Director of Product Management - tim@milyli.com Carl Layton, Project Eclipse Architect - carl@milyli.com Jacob Malliet, Project Eclipse Engineering Manager - jacob@milyli.com","title":"Welcome to Project Eclipse Docs"},{"location":"#welcome-to-project-eclipse-docs","text":"The guides on this website are hosted as a part of the Milyli Github account and made available via GitHub Pages. They are meant to help you get up and running with Project Eclipse Server Alpha and Beta. For any questions pertaining to these guides, Project Eclipse, or, if you want to learn more please contact the following individuals by email: Tim Randall, Director of Product Management - tim@milyli.com Carl Layton, Project Eclipse Architect - carl@milyli.com Jacob Malliet, Project Eclipse Engineering Manager - jacob@milyli.com","title":"Welcome to Project Eclipse Docs"},{"location":"getting-started-iis/","text":"Hosting Eclipse w/ IIS on Windows Server 2022+ Requirements The following user guide was built using Windows Server 2022 Standard Edition running via Hyper-V on a Windows 11 desktop computer on Milyli's private network. Nearly all steps followed in this guide can be followed regardless of the host machine. A physical machine running Windows Server, virtual windows server infrastructure, or a Windows virtual machine hosted on a cloud service such as Azure or AWS are all viable options. Native cloud service hosting is supported but not covered via this document. You will be required to create a non-admin service account for creating the application pool. This service account will need to be able to access the python command. It is recommended that a new, separate service account is used for this purpose to limit access of the web server to only Eclipse files. Python will be installed on the server as a part of this guide. Supported Windows Versions Windows Server 2022+ Standard Edition IIS 10.0+ Server Setup and Pre-Requisites Server Packages Download and install the following packages. Install the .NET Core Hosting Bundle Install Visual C++ Redistribute Package (Recommended) PowerShell 7 Installing Python At the heart of the Eclipse Server is a .NET application that makes use of Python. There are two considerations that should be made when installing Python. Python needs to be accessible by the identity account of the Eclipse application pool. Python will also need to be used during setup to install the Presidio Analyzer and load the default spaCy model. Eclipse requires Python 3.10.x or higher. This guide was written using Python 3.12.4. Python can be downloaded from the python.org website . During the installation it is recommended to install python for all users. If this is not possible, python will need to be installed for both your administrator account and the service account created for the Eclipse application pool identity. To install for all users, use the following prompts during the installation process. Select use admin privileges when installing py.exe add python.exe to PATH Select Customize installation Ensure that for all users is selected for the py launcher Select Next On the next screen, select Install Python 3.12 for all users Without selecting this option, python will be installed for only the currently logged in user. If you elect to skip this step, you must install python for the service account that the Eclipse application pool identity will run as! Installing Analyzers and Default spaCy Model Python will be used to install the presidio analyzers and install Eclipse's default language model. Launch PowerShell 7 as an administrator and use the following command to install the presidio analyzers. pip install presidio_analyzer After the install is successful, install the default language model with the following command. python -m spacy download en_core_web_lg Extract the Website Milyli will share a zip file with you that contains the Eclipse server directory. This zip should be extracted to a root folder. In this example, we extract everything to C:\\eclipse-server . Ensure that all zip contents are in this root folder. The eclipse server directory structure consists of the following: The www directory contains the files for the website and API. The data directory is used for storing app data, requests, responses, and databases. The pi-extractor directory contains the python application. Create a Developer Certificate The Eclipse container requires an HTTPS certificate start and run. For Alpha and Beta purposes, a self-signed developer certificate can be used. If possible, a proper certificate from a valid certificate authority should be used. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retain) a password for the cert. If using this certificate with other Eclipse setups, export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\eclipse.pfx\" -Password $Pwd Create a System Account In this guide, we use a local account to serve as the service account. A service account should be created and use based on your companies IT policies. The account does not need to be a local admin on the server or have any domain permission. This account will only be used to grant limited permissions to the eclipse directory and act as the identity of the website application pool. IIS Setup In the following steps, we'll create the IIS website from scratch. At any point, feel free to utilize any standard operating procedures your organization utilizes for hosting websites on your network in IIS. Create the Application Pool In the following steps we will create the application pool that will be used by the website. Launch IIS Manager as an administrator. Create a new application pool. Give the application name, we chose eclipse-server . Choose No Managed Code for the .NET CLR Version option. Leave Managed pipeline mode set to integrated . Once created, click Advanced settings in the menu on the right. Set Enabled 32-Bit Application to true . Change Start Mode to Always Running . Change Idle Time-out (minutes) to 0 . Change the ApplicationPoolIdentity to the service account created during setup. Create the Website In these steps, we will create and configure the base website for the server. This assumes that built-in default website is removed beforehand. If a website already exists with a valid certificate, then this website should be able to be used instead of following these instructions. New Default Website Create a new website in IIS and provide it a name such as EclipseWeb or Default Website . Choose the DefaultAppPool . Set the the Physical path to the default IIS path at C:\\inetpub\\wwwroot\\ . (Optional) Configure the host name if you are running multiple websites from this server. Add an https binding and select the previously created or installed SSL Certificate. Leave all other checkboxes unchecked. Create the website. Select Advanced settings and set Preload Enabled to True . Existing Default Website If you have a pre-existing default website, then the only change that is recommended is to ensure that Preload Enabled is set to True in the advanced settings of the website. Create the Virtual App The actual Eclipse server will be setup as an application under the default website. To setup the application follow these steps using an existing website or the one created in the previous section. Right click on the website and select Add application . Input eclipse as the alias. Choose the eclipse-server application pool created in this guide. Set the Physical path to the C:\\eclipse-server\\www directory or wherever the root folder is for the unzipped Eclipse server files. Configure Directory Permissions The identity of the application pool needs permission to read, write, and execute python scripts from the Eclipse server. To set these permissions follow these steps. On the root directory eclipse-server , right click and select properties. On the Security tab, click Edit . Click Add then search for and add the service account (ours is eclipse-server in this guide). Select the service account. Add the permissions Read & Execute , List folder contents , and Read and click Ok. Open the directory, right click on the data directory, and select properties. On the Security tab, ensure that the service account has access to the folder. Ensure that the account has Modify and Write permissions on the directory. Restart IIS Either from IIS Manager or command prompt, restart the web server. If using the IIS Manager, you can do so from the root node. Otherwise, open PowerShell 7 as an administrator and input the command iisreset . Wrap-up and Troubleshooting Depending on how the website the virtual application was created under is configured, the Eclipse server should now be running! In this guide, by leaving everything at default, the server is available under localhost and can be accessed by navigating to https://localhost/eclipse/swagger . The URL will be different based on the configuration of your website. Checking logs Logs for the website can be accessed from two locations. Normal, IIS application logs will automatically appear in the servers Event Viewer. You can review these logs by hitting the windows key typing in event and selecting the Event Viewer app. In the Event Viewer, navigate to Windows Logs -> Application and look for application errors. Specific logs can also be accessed directly from the eclipse logs stored in the C:\\eclipse-server\\data\\logs directory. HTTP Error 500.32 - Failed to load .NET Core host This error indicates that the server does not have the pre-requisites for IIS to run a .NET Core application. Ensure that the C++ redistribute package was installed earlier in this guide. Failed to start process python This error will present itself both in the host servers Event Viewer and the Eclipse servers logs. The full error will resemble the following string: Description: The process was terminated due to an unhandled exception. Exception Info: Milyli.Eclipse.Server.Analyzer.Exceptions.ExternalProcessException: Failed to start process python ---> System.ComponentModel.Win32Exception (2): An error occurred trying to start process python with working directory C:\\eclipse-server\\www. The system cannot find the file specified. This error indicates that the user the application pool is running under does not have access to python. Either install python for all users or log into the service account and ensure that python is installed for that user. Installing for the individual account was not tested for the writing of this guide.","title":"IIS (Windows Server 2022+)"},{"location":"getting-started-iis/#hosting-eclipse-w-iis-on-windows-server-2022","text":"","title":"Hosting Eclipse w/ IIS on Windows Server 2022+"},{"location":"getting-started-iis/#requirements","text":"The following user guide was built using Windows Server 2022 Standard Edition running via Hyper-V on a Windows 11 desktop computer on Milyli's private network. Nearly all steps followed in this guide can be followed regardless of the host machine. A physical machine running Windows Server, virtual windows server infrastructure, or a Windows virtual machine hosted on a cloud service such as Azure or AWS are all viable options. Native cloud service hosting is supported but not covered via this document. You will be required to create a non-admin service account for creating the application pool. This service account will need to be able to access the python command. It is recommended that a new, separate service account is used for this purpose to limit access of the web server to only Eclipse files. Python will be installed on the server as a part of this guide.","title":"Requirements"},{"location":"getting-started-iis/#supported-windows-versions","text":"Windows Server 2022+ Standard Edition IIS 10.0+","title":"Supported Windows Versions"},{"location":"getting-started-iis/#server-setup-and-pre-requisites","text":"","title":"Server Setup and Pre-Requisites"},{"location":"getting-started-iis/#server-packages","text":"Download and install the following packages. Install the .NET Core Hosting Bundle Install Visual C++ Redistribute Package (Recommended) PowerShell 7","title":"Server Packages"},{"location":"getting-started-iis/#installing-python","text":"At the heart of the Eclipse Server is a .NET application that makes use of Python. There are two considerations that should be made when installing Python. Python needs to be accessible by the identity account of the Eclipse application pool. Python will also need to be used during setup to install the Presidio Analyzer and load the default spaCy model. Eclipse requires Python 3.10.x or higher. This guide was written using Python 3.12.4. Python can be downloaded from the python.org website . During the installation it is recommended to install python for all users. If this is not possible, python will need to be installed for both your administrator account and the service account created for the Eclipse application pool identity. To install for all users, use the following prompts during the installation process. Select use admin privileges when installing py.exe add python.exe to PATH Select Customize installation Ensure that for all users is selected for the py launcher Select Next On the next screen, select Install Python 3.12 for all users Without selecting this option, python will be installed for only the currently logged in user. If you elect to skip this step, you must install python for the service account that the Eclipse application pool identity will run as!","title":"Installing Python"},{"location":"getting-started-iis/#installing-analyzers-and-default-spacy-model","text":"Python will be used to install the presidio analyzers and install Eclipse's default language model. Launch PowerShell 7 as an administrator and use the following command to install the presidio analyzers. pip install presidio_analyzer After the install is successful, install the default language model with the following command. python -m spacy download en_core_web_lg","title":"Installing Analyzers and Default spaCy Model"},{"location":"getting-started-iis/#extract-the-website","text":"Milyli will share a zip file with you that contains the Eclipse server directory. This zip should be extracted to a root folder. In this example, we extract everything to C:\\eclipse-server . Ensure that all zip contents are in this root folder. The eclipse server directory structure consists of the following: The www directory contains the files for the website and API. The data directory is used for storing app data, requests, responses, and databases. The pi-extractor directory contains the python application.","title":"Extract the Website"},{"location":"getting-started-iis/#create-a-developer-certificate","text":"The Eclipse container requires an HTTPS certificate start and run. For Alpha and Beta purposes, a self-signed developer certificate can be used. If possible, a proper certificate from a valid certificate authority should be used. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retain) a password for the cert. If using this certificate with other Eclipse setups, export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\eclipse.pfx\" -Password $Pwd","title":"Create a Developer Certificate"},{"location":"getting-started-iis/#create-a-system-account","text":"In this guide, we use a local account to serve as the service account. A service account should be created and use based on your companies IT policies. The account does not need to be a local admin on the server or have any domain permission. This account will only be used to grant limited permissions to the eclipse directory and act as the identity of the website application pool.","title":"Create a System Account"},{"location":"getting-started-iis/#iis-setup","text":"In the following steps, we'll create the IIS website from scratch. At any point, feel free to utilize any standard operating procedures your organization utilizes for hosting websites on your network in IIS.","title":"IIS Setup"},{"location":"getting-started-iis/#create-the-application-pool","text":"In the following steps we will create the application pool that will be used by the website. Launch IIS Manager as an administrator. Create a new application pool. Give the application name, we chose eclipse-server . Choose No Managed Code for the .NET CLR Version option. Leave Managed pipeline mode set to integrated . Once created, click Advanced settings in the menu on the right. Set Enabled 32-Bit Application to true . Change Start Mode to Always Running . Change Idle Time-out (minutes) to 0 . Change the ApplicationPoolIdentity to the service account created during setup.","title":"Create the Application Pool"},{"location":"getting-started-iis/#create-the-website","text":"In these steps, we will create and configure the base website for the server. This assumes that built-in default website is removed beforehand. If a website already exists with a valid certificate, then this website should be able to be used instead of following these instructions.","title":"Create the Website"},{"location":"getting-started-iis/#new-default-website","text":"Create a new website in IIS and provide it a name such as EclipseWeb or Default Website . Choose the DefaultAppPool . Set the the Physical path to the default IIS path at C:\\inetpub\\wwwroot\\ . (Optional) Configure the host name if you are running multiple websites from this server. Add an https binding and select the previously created or installed SSL Certificate. Leave all other checkboxes unchecked. Create the website. Select Advanced settings and set Preload Enabled to True .","title":"New Default Website"},{"location":"getting-started-iis/#existing-default-website","text":"If you have a pre-existing default website, then the only change that is recommended is to ensure that Preload Enabled is set to True in the advanced settings of the website.","title":"Existing Default Website"},{"location":"getting-started-iis/#create-the-virtual-app","text":"The actual Eclipse server will be setup as an application under the default website. To setup the application follow these steps using an existing website or the one created in the previous section. Right click on the website and select Add application . Input eclipse as the alias. Choose the eclipse-server application pool created in this guide. Set the Physical path to the C:\\eclipse-server\\www directory or wherever the root folder is for the unzipped Eclipse server files.","title":"Create the Virtual App"},{"location":"getting-started-iis/#configure-directory-permissions","text":"The identity of the application pool needs permission to read, write, and execute python scripts from the Eclipse server. To set these permissions follow these steps. On the root directory eclipse-server , right click and select properties. On the Security tab, click Edit . Click Add then search for and add the service account (ours is eclipse-server in this guide). Select the service account. Add the permissions Read & Execute , List folder contents , and Read and click Ok. Open the directory, right click on the data directory, and select properties. On the Security tab, ensure that the service account has access to the folder. Ensure that the account has Modify and Write permissions on the directory.","title":"Configure Directory Permissions"},{"location":"getting-started-iis/#restart-iis","text":"Either from IIS Manager or command prompt, restart the web server. If using the IIS Manager, you can do so from the root node. Otherwise, open PowerShell 7 as an administrator and input the command iisreset .","title":"Restart IIS"},{"location":"getting-started-iis/#wrap-up-and-troubleshooting","text":"Depending on how the website the virtual application was created under is configured, the Eclipse server should now be running! In this guide, by leaving everything at default, the server is available under localhost and can be accessed by navigating to https://localhost/eclipse/swagger . The URL will be different based on the configuration of your website.","title":"Wrap-up and Troubleshooting"},{"location":"getting-started-iis/#checking-logs","text":"Logs for the website can be accessed from two locations. Normal, IIS application logs will automatically appear in the servers Event Viewer. You can review these logs by hitting the windows key typing in event and selecting the Event Viewer app. In the Event Viewer, navigate to Windows Logs -> Application and look for application errors. Specific logs can also be accessed directly from the eclipse logs stored in the C:\\eclipse-server\\data\\logs directory.","title":"Checking logs"},{"location":"getting-started-iis/#http-error-50032-failed-to-load-net-core-host","text":"This error indicates that the server does not have the pre-requisites for IIS to run a .NET Core application. Ensure that the C++ redistribute package was installed earlier in this guide.","title":"HTTP Error 500.32 - Failed to load .NET Core host"},{"location":"getting-started-iis/#failed-to-start-process-python","text":"This error will present itself both in the host servers Event Viewer and the Eclipse servers logs. The full error will resemble the following string: Description: The process was terminated due to an unhandled exception. Exception Info: Milyli.Eclipse.Server.Analyzer.Exceptions.ExternalProcessException: Failed to start process python ---> System.ComponentModel.Win32Exception (2): An error occurred trying to start process python with working directory C:\\eclipse-server\\www. The system cannot find the file specified. This error indicates that the user the application pool is running under does not have access to python. Either install python for all users or log into the service account and ensure that python is installed for that user. Installing for the individual account was not tested for the writing of this guide.","title":"Failed to start process python"},{"location":"getting-started-ubuntu/","text":"Hosting Eclipse w/ Docker Engine on Ubuntu Requirements The following user guide was built using the Ubuntu Noble 24.04 (LTS, 64-bit) running via Hyper-V on a Windows 11 desktop computer on Milyli\u2019s private network. Nearly all steps followed in this guide can be followed regardless of the host machine of the Linux distribution. A Linux server running Ubuntu, a Windows Server with an Ubuntu VM, or a VM hosted on a cloud service such as Azure or AWS are all viable options. Native cloud service hosting is supported but not covered via this document. This guide will install and use Docker Engine via Docker\u2019s apt repository rather than use Docker Desktop for Linux. If you are using an existing server, you should ensure that old docker files are removed. For more details refer to the Docker removal instructions . Note: For more general information about Docker and its related components, please refer to the official documentation . Supported Ubuntu Versions (64-bit) Ubuntu Noble 24.04 (LTS) Ubuntu Mantic 23.10 (EOL: July 12, 2024) Ubuntu Jammy 22.04 (LTS) Ubuntu Focal 20.04 (LTS) VM Setup and Docker Engine Installation Installing Ubuntu VM Your approach to hosting Linux should not impact the following steps if a supported 64-bit Ubuntu distribution is used. This guide utilizes Ubuntu 22.04 LTS installed on a networked computer with Hyper-V Quick Create . Launch the Hyper-V Quick Create tool and select Ubuntu 22.04 LTS. Configuring the VM and Connecting Follow the prompts and leave all settings as default to begin with. On the Virtual Machine Created Succesfully screen, select Edit Settings... In a later step, we will push the docker container image into this VM. Now is the best time to expand the number of resources on the VM to better accommodate Eclipse. For this guide, we made the following adjustments. Increase the memory on the virutal machine from 4096 to 8192 . Change the dynamic memory range from 512 to 1048576 to 2048 to 8192 or pick a static memory range. Edit the hard drive and choose to expand it from 12 GB to 36 GB or a greater number. If your organization has additional requirements for the VM, make those changes now. Once complete, connect to and log into the VM. You will be required to create a user account as a part of the operating system's first startup. This account will have access to perform root commands. This guide will utilize this user for all following steps. Expand the Hard Disk Hyper-V partitions the hard drive at the initial 12 GB automatically as a part of the quick-create process. Ubuntu hosted on Hyper-V may have issues when trying to use lvdisplay , lvextend , or GParted . For this guide, Cloud Guest Utils was used. Open the terminal. Run the command sudo fdisk -l and note the name of the primary Linux filesystem (if following along, it should be /dev/sda1 ). Install Cloud Guest Utils using the command sudo apt install cloud-guest utils Grow the partition using the command sudo growpart /dev/sda 1 Resize the partition using the command sudo resize2fs /dev/sda1 Install Docker Engine From Repository To install Docker Engine the full, detailed instructions should be followed. These are available on the official docker guide . Follow the guide up until the step for running the hello-world docker container. Create a Developer Certificate The Eclipse container requires an HTTPS certificate PFX in order to start and run. For Alpha and Beta purposes, a self-signed developer certificate can be used. If possible, a proper certificate from a valid certificate authority should be used to generate the PFX. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retain) a password for the cert. Export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\eclipse.pfx\" -Password $Pwd Load Eclipse Container Image Create Volume Folders If you have organization specific processes for creating folders, please follow those at this point. In the Home folder create a new folder named eclipse . Inside the eclipse folder, create three additional folders named logs , https , and db . Update the volume folder permissions to 777 with the chmod command. Store Container Image and Cert on VM If the VM is connected to the internet, download the container image file Milyli shared with you to the eclipse folder. The PFX created in the previous step should be placed in the eclipse\\https directory. If the files are on a host machine and you do not already have tools for pushing files into your virtual machine, SSH is a powerful and secure way of doing so. Using the SCP PowerShell command from the host machine enables easy transfer to VM. If you are unsure of the IP address of your virtual machine, use the following command and note the Get-NetNeighbor command Get-NetNeighbor -LinkLayerAddress 00-15-5d-* and take note of it for later steps. The easiest way to make SSH requests to the VM is by installing openssh server with the terminal command sudo apt install openssh-server . For the example file transfers below, the image and PFX file have been saved on the VM host machine inn the c:\\eclipse directory. Launch PowerShell/Windows Terminal. Change the directory to c:\\eclipse . From the host machine, run the SCP command scp eclipse.pfx [username]@[ipaddress]:/home/[username]/eclipse/https . From the host machine, run the SCP command scp eclipse.server.alpha-6 [username]@[ipaddress]:/home/[username]/eclipse . Load Container Image Finally, load the image into Docker Engine with the docker load command. sudo docker load -i eclipse.server.alpha-6 Running Eclipse Container With the container loaded, we're ready to get it running. Replace the values of the parameters in the following command with the ones that match the work you've done in previous steps. sudo docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=[YOURPASSWORD]\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/[YOURCERTIFICATENAME].pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v /[PATHTOHTTPSFOLDER]/https:/https:ro -v /[PATHTODBFOLDER]/db:/db:rw -v /[PATHTOLOGSFOLDER]/logs:/logs:rw milyli.eclipse.server Below is an example with the values from this guide. sudo docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=eclipse\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/eclipse.pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v /home/tim/eclipse/https:/https:ro -v /home/tim/eclipse/db:/db:rw -v /home/tim/eclipse/logs:/logs:rw milyli.eclipse.server If following along, Eclipse should now be running on your VM! Navigate to https://localhost:8000/swagger/index.html on the VM to verify it's running successfully! At this point, if you followed this guide exactly as written, Eclipse should also be accessible via the host machine using the IP address: https://[IPADDRESS]:8000/swagger/index.html . Additional steps will be required of your organization's network administrator to ensure the Eclipse server is visible to your Relativity instance. In order for the Eclipse Relativity Application to access the server, the agent(s) servers where the Eclipse Agent will be created must have access to the base URL of the Eclipse server. Useful Commands Get container Id sudo docker ps -a View container logs sudo docker logs container_id Stop a running container sudo docker container stop container_id Running Docker Engine Rootless If needed, both Docker Engine and Eclipse can be run rootless. Milyli provides limited technical support for this configuration beyond confirming that it is valid. We strongly suggest reading and following the official Docker documentation for doing so.","title":"Linux (Ubuntu)"},{"location":"getting-started-ubuntu/#hosting-eclipse-w-docker-engine-on-ubuntu","text":"","title":"Hosting Eclipse w/ Docker Engine on Ubuntu"},{"location":"getting-started-ubuntu/#requirements","text":"The following user guide was built using the Ubuntu Noble 24.04 (LTS, 64-bit) running via Hyper-V on a Windows 11 desktop computer on Milyli\u2019s private network. Nearly all steps followed in this guide can be followed regardless of the host machine of the Linux distribution. A Linux server running Ubuntu, a Windows Server with an Ubuntu VM, or a VM hosted on a cloud service such as Azure or AWS are all viable options. Native cloud service hosting is supported but not covered via this document. This guide will install and use Docker Engine via Docker\u2019s apt repository rather than use Docker Desktop for Linux. If you are using an existing server, you should ensure that old docker files are removed. For more details refer to the Docker removal instructions . Note: For more general information about Docker and its related components, please refer to the official documentation .","title":"Requirements"},{"location":"getting-started-ubuntu/#supported-ubuntu-versions-64-bit","text":"Ubuntu Noble 24.04 (LTS) Ubuntu Mantic 23.10 (EOL: July 12, 2024) Ubuntu Jammy 22.04 (LTS) Ubuntu Focal 20.04 (LTS)","title":"Supported Ubuntu Versions (64-bit)"},{"location":"getting-started-ubuntu/#vm-setup-and-docker-engine-installation","text":"","title":"VM Setup and Docker Engine Installation"},{"location":"getting-started-ubuntu/#installing-ubuntu-vm","text":"Your approach to hosting Linux should not impact the following steps if a supported 64-bit Ubuntu distribution is used. This guide utilizes Ubuntu 22.04 LTS installed on a networked computer with Hyper-V Quick Create . Launch the Hyper-V Quick Create tool and select Ubuntu 22.04 LTS.","title":"Installing Ubuntu VM"},{"location":"getting-started-ubuntu/#configuring-the-vm-and-connecting","text":"Follow the prompts and leave all settings as default to begin with. On the Virtual Machine Created Succesfully screen, select Edit Settings... In a later step, we will push the docker container image into this VM. Now is the best time to expand the number of resources on the VM to better accommodate Eclipse. For this guide, we made the following adjustments. Increase the memory on the virutal machine from 4096 to 8192 . Change the dynamic memory range from 512 to 1048576 to 2048 to 8192 or pick a static memory range. Edit the hard drive and choose to expand it from 12 GB to 36 GB or a greater number. If your organization has additional requirements for the VM, make those changes now. Once complete, connect to and log into the VM. You will be required to create a user account as a part of the operating system's first startup. This account will have access to perform root commands. This guide will utilize this user for all following steps.","title":"Configuring the VM and Connecting"},{"location":"getting-started-ubuntu/#expand-the-hard-disk","text":"Hyper-V partitions the hard drive at the initial 12 GB automatically as a part of the quick-create process. Ubuntu hosted on Hyper-V may have issues when trying to use lvdisplay , lvextend , or GParted . For this guide, Cloud Guest Utils was used. Open the terminal. Run the command sudo fdisk -l and note the name of the primary Linux filesystem (if following along, it should be /dev/sda1 ). Install Cloud Guest Utils using the command sudo apt install cloud-guest utils Grow the partition using the command sudo growpart /dev/sda 1 Resize the partition using the command sudo resize2fs /dev/sda1","title":"Expand the Hard Disk"},{"location":"getting-started-ubuntu/#install-docker-engine-from-repository","text":"To install Docker Engine the full, detailed instructions should be followed. These are available on the official docker guide . Follow the guide up until the step for running the hello-world docker container.","title":"Install Docker Engine From Repository"},{"location":"getting-started-ubuntu/#create-a-developer-certificate","text":"The Eclipse container requires an HTTPS certificate PFX in order to start and run. For Alpha and Beta purposes, a self-signed developer certificate can be used. If possible, a proper certificate from a valid certificate authority should be used to generate the PFX. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retain) a password for the cert. Export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\eclipse.pfx\" -Password $Pwd","title":"Create a Developer Certificate"},{"location":"getting-started-ubuntu/#load-eclipse-container-image","text":"","title":"Load Eclipse Container Image"},{"location":"getting-started-ubuntu/#create-volume-folders","text":"If you have organization specific processes for creating folders, please follow those at this point. In the Home folder create a new folder named eclipse . Inside the eclipse folder, create three additional folders named logs , https , and db . Update the volume folder permissions to 777 with the chmod command.","title":"Create Volume Folders"},{"location":"getting-started-ubuntu/#store-container-image-and-cert-on-vm","text":"If the VM is connected to the internet, download the container image file Milyli shared with you to the eclipse folder. The PFX created in the previous step should be placed in the eclipse\\https directory. If the files are on a host machine and you do not already have tools for pushing files into your virtual machine, SSH is a powerful and secure way of doing so. Using the SCP PowerShell command from the host machine enables easy transfer to VM. If you are unsure of the IP address of your virtual machine, use the following command and note the Get-NetNeighbor command Get-NetNeighbor -LinkLayerAddress 00-15-5d-* and take note of it for later steps. The easiest way to make SSH requests to the VM is by installing openssh server with the terminal command sudo apt install openssh-server . For the example file transfers below, the image and PFX file have been saved on the VM host machine inn the c:\\eclipse directory. Launch PowerShell/Windows Terminal. Change the directory to c:\\eclipse . From the host machine, run the SCP command scp eclipse.pfx [username]@[ipaddress]:/home/[username]/eclipse/https . From the host machine, run the SCP command scp eclipse.server.alpha-6 [username]@[ipaddress]:/home/[username]/eclipse .","title":"Store Container Image and Cert on VM"},{"location":"getting-started-ubuntu/#load-container-image","text":"Finally, load the image into Docker Engine with the docker load command. sudo docker load -i eclipse.server.alpha-6","title":"Load Container Image"},{"location":"getting-started-ubuntu/#running-eclipse-container","text":"With the container loaded, we're ready to get it running. Replace the values of the parameters in the following command with the ones that match the work you've done in previous steps. sudo docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=[YOURPASSWORD]\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/[YOURCERTIFICATENAME].pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v /[PATHTOHTTPSFOLDER]/https:/https:ro -v /[PATHTODBFOLDER]/db:/db:rw -v /[PATHTOLOGSFOLDER]/logs:/logs:rw milyli.eclipse.server Below is an example with the values from this guide. sudo docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=eclipse\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/eclipse.pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v /home/tim/eclipse/https:/https:ro -v /home/tim/eclipse/db:/db:rw -v /home/tim/eclipse/logs:/logs:rw milyli.eclipse.server If following along, Eclipse should now be running on your VM! Navigate to https://localhost:8000/swagger/index.html on the VM to verify it's running successfully! At this point, if you followed this guide exactly as written, Eclipse should also be accessible via the host machine using the IP address: https://[IPADDRESS]:8000/swagger/index.html . Additional steps will be required of your organization's network administrator to ensure the Eclipse server is visible to your Relativity instance. In order for the Eclipse Relativity Application to access the server, the agent(s) servers where the Eclipse Agent will be created must have access to the base URL of the Eclipse server.","title":"Running Eclipse Container"},{"location":"getting-started-ubuntu/#useful-commands","text":"","title":"Useful Commands"},{"location":"getting-started-ubuntu/#get-container-id","text":"sudo docker ps -a","title":"Get container Id"},{"location":"getting-started-ubuntu/#view-container-logs","text":"sudo docker logs container_id","title":"View container logs"},{"location":"getting-started-ubuntu/#stop-a-running-container","text":"sudo docker container stop container_id","title":"Stop a running container"},{"location":"getting-started-ubuntu/#running-docker-engine-rootless","text":"If needed, both Docker Engine and Eclipse can be run rootless. Milyli provides limited technical support for this configuration beyond confirming that it is valid. We strongly suggest reading and following the official Docker documentation for doing so.","title":"Running Docker Engine Rootless"},{"location":"getting-started-windows/","text":"Hosting Eclipse w/ Docker Desktop on Windows Requirements The following requirements assume that a local server or computer will be used for initial alpha testing. A machine that can have Docker Desktop installed on it must be selected. If a different hosting infrastructure is used, this document will provide high-level details that can be adapted to your preferred solution. Milyli is available to assist in working through your preferred testing setup! Note: For more information about Docker and its related components, please refer to the official documentation . Download and install Docker Desktop with WSL 2 backend. Install using default settings, following all prompts, and restart as necessary. If using Windows Server, ensure the nested virtualization Windows feature is enabled. PowerShell 5 or greater (PowerShell 7+ suggested) Windows Terminal (Strongly suggested) Setup Create directories for container volumes Create a working Eclipse Directory (e.g. c:\\eclipse) . Create the following child directories: c:\\eclipse\\db c:\\eclipse\\https c:\\eclipse\\logs c:\\eclipse\\logs\\metrics Download the eclipse.server.alpha container image shared by Milyli and place it in the root directory. Create a developer certificate The Eclipse container requires an HTTPS certificate PFX in order to start and run. For Alpha and Beta purposes, an self-signed developer certificate can be used. If possible, a proper certificate from a validate certificate authority should be used to generate the PFX. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retained) a password for the cert. Export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\https\\eclipse.pfx\" -Password $Pwd Installation Load the docker image Open Windows Terminal. Validate that the docker command is available by using the command docker . Docker should print out usage instructions if everything is ready to go. Type the following command to load the docker image docker load -i c:\\eclipse\\eclipse.server.alpha Confirm the image is loaded by using the command docker image list . Under repository, eclipse.server should be one of the visible rows. Start the docker container With the image loaded we can now initialize the container with the docker run command. The following command provides the necessary parameters to the web server in the container to take advantage of the supplied certificate, what port to run on, and location information for the previously created physical directories that will be used for the container volumes. Ensure to replace the password with the password you set on the PFX in the previous step. docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=INSERTPFXPASSWORDHERE\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/eclipse.pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v c:\\eclipse\\https:/https:ro -v c:\\eclipse\\db:/db:rw -v c:\\eclipse\\logs:/logs:rw milyli.eclipse.server If everything is set up correctly, this will initialize the docker container and you are good to go! Testing To quickly validate that the container is up and running, the API documentation should now be available locally. Open a browser and navigate to https://localhost:8000/swagger/index.html . API documentation should load after a few moments.","title":"Windows (Docker Desktop)"},{"location":"getting-started-windows/#hosting-eclipse-w-docker-desktop-on-windows","text":"","title":"Hosting Eclipse w/ Docker Desktop on Windows"},{"location":"getting-started-windows/#requirements","text":"The following requirements assume that a local server or computer will be used for initial alpha testing. A machine that can have Docker Desktop installed on it must be selected. If a different hosting infrastructure is used, this document will provide high-level details that can be adapted to your preferred solution. Milyli is available to assist in working through your preferred testing setup! Note: For more information about Docker and its related components, please refer to the official documentation . Download and install Docker Desktop with WSL 2 backend. Install using default settings, following all prompts, and restart as necessary. If using Windows Server, ensure the nested virtualization Windows feature is enabled. PowerShell 5 or greater (PowerShell 7+ suggested) Windows Terminal (Strongly suggested)","title":"Requirements"},{"location":"getting-started-windows/#setup","text":"","title":"Setup"},{"location":"getting-started-windows/#create-directories-for-container-volumes","text":"Create a working Eclipse Directory (e.g. c:\\eclipse) . Create the following child directories: c:\\eclipse\\db c:\\eclipse\\https c:\\eclipse\\logs c:\\eclipse\\logs\\metrics Download the eclipse.server.alpha container image shared by Milyli and place it in the root directory.","title":"Create directories for container volumes"},{"location":"getting-started-windows/#create-a-developer-certificate","text":"The Eclipse container requires an HTTPS certificate PFX in order to start and run. For Alpha and Beta purposes, an self-signed developer certificate can be used. If possible, a proper certificate from a validate certificate authority should be used to generate the PFX. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retained) a password for the cert. Export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\https\\eclipse.pfx\" -Password $Pwd","title":"Create a developer certificate"},{"location":"getting-started-windows/#installation","text":"","title":"Installation"},{"location":"getting-started-windows/#load-the-docker-image","text":"Open Windows Terminal. Validate that the docker command is available by using the command docker . Docker should print out usage instructions if everything is ready to go. Type the following command to load the docker image docker load -i c:\\eclipse\\eclipse.server.alpha Confirm the image is loaded by using the command docker image list . Under repository, eclipse.server should be one of the visible rows.","title":"Load the docker image"},{"location":"getting-started-windows/#start-the-docker-container","text":"With the image loaded we can now initialize the container with the docker run command. The following command provides the necessary parameters to the web server in the container to take advantage of the supplied certificate, what port to run on, and location information for the previously created physical directories that will be used for the container volumes. Ensure to replace the password with the password you set on the PFX in the previous step. docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=INSERTPFXPASSWORDHERE\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/eclipse.pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v c:\\eclipse\\https:/https:ro -v c:\\eclipse\\db:/db:rw -v c:\\eclipse\\logs:/logs:rw milyli.eclipse.server If everything is set up correctly, this will initialize the docker container and you are good to go!","title":"Start the docker container"},{"location":"getting-started-windows/#testing","text":"To quickly validate that the container is up and running, the API documentation should now be available locally. Open a browser and navigate to https://localhost:8000/swagger/index.html . API documentation should load after a few moments.","title":"Testing"}]}