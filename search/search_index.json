{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Project Eclipse Docs The guides on this website are hosted as a part of the Milyli Github account and made available via GitHub Pages. They are meant to help you get up and running with Project Eclipse Server Alpha and Beta. For any questions pertaining to these guides, Project Eclipse, or, if you want to learn more please contact the following individuals by email: Tim Randall, Director of Product Management - tim@milyli.com Carl Layton, Project Eclipse Architect - carl@milyli.com Jacob Malliet, Project Eclipse Engineering Manager - jacob@milyli.com","title":"Welcome to Project Eclipse Docs"},{"location":"#welcome-to-project-eclipse-docs","text":"The guides on this website are hosted as a part of the Milyli Github account and made available via GitHub Pages. They are meant to help you get up and running with Project Eclipse Server Alpha and Beta. For any questions pertaining to these guides, Project Eclipse, or, if you want to learn more please contact the following individuals by email: Tim Randall, Director of Product Management - tim@milyli.com Carl Layton, Project Eclipse Architect - carl@milyli.com Jacob Malliet, Project Eclipse Engineering Manager - jacob@milyli.com","title":"Welcome to Project Eclipse Docs"},{"location":"getting-started-ubuntu/","text":"Hosting Eclipse w/ Docker Engine on Ubuntu Requirements The following user guide was built using the Ubuntu Noble 24.04 (LTS, 64-bit) running via Hyper-V on a Windows 11 desktop computer on Milyli\u2019s private network. Nearly all steps followed in this guide can be followed regardless of the host machine of the Linux distribution including a Linux server running Ubuntu, a Windows Server with an Ubuntu VM, or a VM hosted on a cloud service such as Azure or AWS. Native cloud service hosting is supported but not covered via this document. This guide will install and use Docker Engine via Docker\u2019s apt repository rather than use Docker Desktop for Linux. If you are using an existing server, you should ensure that old docker files are removed. For more details refer to the Docker removal instructions . Note: For more general information about Docker and its related components, please refer to the official documentation . Supported Ubuntu Versions (64-bit) Ubuntu Noble 24.04 (LTS) Ubuntu Mantic 23.10 (EOL: July 12, 2024) Ubuntu Jammy 22.04 (LTS) Ubuntu Focal 20.04 (LTS) VM Setup and Docker Engine Installation Installing Ubuntu VM Your approach to hosting Linux should not impact the following steps if a supported 64-bit Ubuntu distribution is used. This guide utilizes Ubuntu 22.04 LTS installed on a networked computer with Hyper-V Quick Create . Launch the Hyper-V Quick Create tool and select Ubuntu 22.04 LTS. Configuring the VM and Connecting Follow the prompts and leave all settings as default to begin with. On the Virtual Machine Created Succesfully screen, select Edit Settings... In a later step, we will push the docker container image into this VM. Now is the best time to expand the number of resources on the VM to better accommodate Eclipse. For this guide, we made the following adjustments. Increase the memory on the virutal machine from 4096 to 8192 . Change the dynamic memory range from 512 to 1048576 to 2048 to 8192 or pick a static memory range. Edit the hard drive and choose to expand it from 12 GB to 36 GB or a greater number. If your organization has additional requirements for the VM, make those changes now. Once complete, connect to and log into the VM. You will be required to create a user account as a part of the operating system's first startup. This account will have access to perform root commands. This guide will utilize this user for all following steps. Expand the Hard Disk Hyper-V partitions the hard drive at the initial 12 GB automatically as a part of the quick-create process. Ubuntu hosted on Hyper-V may have issues when trying to use lvdisplay , lvextend , or GParted . For this guide, Cloud Guest Util s` was used. Open the terminal. Run the command sudo fdisk -l and note the name of the primary Linnux filesystem (if following along, it should be /dev/sda1 ). Install Cloud Guest Utils using the command sudo apt install cloud-guest utils Grow the partition using the command sudo growpart /dev/sda 1 Resize the partition using the command sudo resize2fs /dev/sda1 Install Docker Engine From Repository To install Docker Engine the full, detailed instructions should be followed. These are available on the official docker guide . Follow the guide up until the step for running the hello-world docker container. Create a Developer Certificate The Eclipse container requires an HTTPS certificate PFX in order to start and run. For Alpha and Beta purposes, an self-signed developer certificate can be used. If possible, a proper certificate from a validate certificate authority should be used to generate the PFX. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retained) a password for the cert. Export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\eclipse.pfx\" -Password $Pwd Load Eclipse Container Image Create Volume Folders If you have organization specific processes for creating folders, please follow those at this point. In the Home folder create a new folder named eclipse . Inside the eclipse folder, create three additional folders named logs , https , and db . Update the volume folder permissions to 777 with the chmod command. Store Container Image and Cert on VM If the VM is connected to the internet, download the container image file Milyli shared with you to the eclipse folder. The PFX created in the previous step should be placed in the eclipse\\https directory. If the files are on a host machine and you do not already have tools for pushing files into your virtual machine, SSH is a powerful and secure way of doing so. Using the SCP PowerShell command from the host machine enables easy transfer to VM. If you are unsure of the IP address of your virtual machine, use the following command and note the Get-NetNeighbor command Get-NetNeighbor -LinkLayerAddress 00-15-5d-* and take note of it for later steps. The easiest way to make SSH requests to the VM is by installing openssh server with the terminal command sudo apt install openssh-server . For the example file transfers below, the image and PFX file have been saved on the VM host machine inn the c:\\eclipse directory. Launch PowerShell/Windows Terminal. Change the directory to c:\\eclipse . From the host machine, run the SCP command scp eclipse.pfx [username]@[ipaddress]:/home/[username]/eclipse/https . From the host machine, run the SCP command scp eclipse.server.alpha-6 [username]@[ipaddress]:/home/[username]/eclipse . Load Container Image Finally, load the image into Docker Engine with the docker load command. sudo docker load -i eclipse.server.alpha-6 Running Eclipse Container With the container loaded, we're ready to get it running. Replace the values of the parameters in the following command with the ones that match the work you've done in previous steps. sudo docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=[YOURPASSWORD]\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/[YOURCERTIFICATENAME].pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v /[PATHTOHTTPSFOLDER]/https:/https:ro -v /[PATHTODBFOLDER]/db:/db:rw -v /[PATHTOLOGSFOLDER]/logs:/logs:rw milyli.eclipse.server Below is an example with the values from this guide. sudo docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=eclipse\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/eclipse.pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v /home/tim/eclipse/https:/https:ro -v /home/tim/eclipse/db:/db:rw -v /home/tim/eclipse/logs:/logs:rw milyli.eclipse.server If following along, Eclipse should now be running on your VM! Navigate to https://localhost:8000/swagger/index.html on the VM to verify it's running successfully! At this point, if you followed this guide exactly as written, Eclipse should also be accessible via the host machine using the IP address: https://[IPADDRESS]:8000/swagger/index.html . Additional steps will be required of your organization's network administrator to ensure the Eclipse server visible to your Relativity instance. In order for the Eclipse Relativity Application to access the server, the agent(s) servers where the Eclipse Agent will be created must have access to the base URL of the Eclipse server. Useful Commands Get container Id sudo docker ps -a View container logs sudo docker logs container_id Stop a running container sudo docker container stop container_id Running Docker Engine Rootless If needed, both Docker Engine and Eclipse can be ran rootless. Milyli provides limited technical support for this configuration beyond confirming that it is valid. We strongly suggest reading and following the official Docker documentation for doing so.","title":"Linux (Ubuntu)"},{"location":"getting-started-ubuntu/#hosting-eclipse-w-docker-engine-on-ubuntu","text":"","title":"Hosting Eclipse w/ Docker Engine on Ubuntu"},{"location":"getting-started-ubuntu/#requirements","text":"The following user guide was built using the Ubuntu Noble 24.04 (LTS, 64-bit) running via Hyper-V on a Windows 11 desktop computer on Milyli\u2019s private network. Nearly all steps followed in this guide can be followed regardless of the host machine of the Linux distribution including a Linux server running Ubuntu, a Windows Server with an Ubuntu VM, or a VM hosted on a cloud service such as Azure or AWS. Native cloud service hosting is supported but not covered via this document. This guide will install and use Docker Engine via Docker\u2019s apt repository rather than use Docker Desktop for Linux. If you are using an existing server, you should ensure that old docker files are removed. For more details refer to the Docker removal instructions . Note: For more general information about Docker and its related components, please refer to the official documentation .","title":"Requirements"},{"location":"getting-started-ubuntu/#supported-ubuntu-versions-64-bit","text":"Ubuntu Noble 24.04 (LTS) Ubuntu Mantic 23.10 (EOL: July 12, 2024) Ubuntu Jammy 22.04 (LTS) Ubuntu Focal 20.04 (LTS)","title":"Supported Ubuntu Versions (64-bit)"},{"location":"getting-started-ubuntu/#vm-setup-and-docker-engine-installation","text":"","title":"VM Setup and Docker Engine Installation"},{"location":"getting-started-ubuntu/#installing-ubuntu-vm","text":"Your approach to hosting Linux should not impact the following steps if a supported 64-bit Ubuntu distribution is used. This guide utilizes Ubuntu 22.04 LTS installed on a networked computer with Hyper-V Quick Create . Launch the Hyper-V Quick Create tool and select Ubuntu 22.04 LTS.","title":"Installing Ubuntu VM"},{"location":"getting-started-ubuntu/#configuring-the-vm-and-connecting","text":"Follow the prompts and leave all settings as default to begin with. On the Virtual Machine Created Succesfully screen, select Edit Settings... In a later step, we will push the docker container image into this VM. Now is the best time to expand the number of resources on the VM to better accommodate Eclipse. For this guide, we made the following adjustments. Increase the memory on the virutal machine from 4096 to 8192 . Change the dynamic memory range from 512 to 1048576 to 2048 to 8192 or pick a static memory range. Edit the hard drive and choose to expand it from 12 GB to 36 GB or a greater number. If your organization has additional requirements for the VM, make those changes now. Once complete, connect to and log into the VM. You will be required to create a user account as a part of the operating system's first startup. This account will have access to perform root commands. This guide will utilize this user for all following steps.","title":"Configuring the VM and Connecting"},{"location":"getting-started-ubuntu/#expand-the-hard-disk","text":"Hyper-V partitions the hard drive at the initial 12 GB automatically as a part of the quick-create process. Ubuntu hosted on Hyper-V may have issues when trying to use lvdisplay , lvextend , or GParted . For this guide, Cloud Guest Util s` was used. Open the terminal. Run the command sudo fdisk -l and note the name of the primary Linnux filesystem (if following along, it should be /dev/sda1 ). Install Cloud Guest Utils using the command sudo apt install cloud-guest utils Grow the partition using the command sudo growpart /dev/sda 1 Resize the partition using the command sudo resize2fs /dev/sda1","title":"Expand the Hard Disk"},{"location":"getting-started-ubuntu/#install-docker-engine-from-repository","text":"To install Docker Engine the full, detailed instructions should be followed. These are available on the official docker guide . Follow the guide up until the step for running the hello-world docker container.","title":"Install Docker Engine From Repository"},{"location":"getting-started-ubuntu/#create-a-developer-certificate","text":"The Eclipse container requires an HTTPS certificate PFX in order to start and run. For Alpha and Beta purposes, an self-signed developer certificate can be used. If possible, a proper certificate from a validate certificate authority should be used to generate the PFX. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retained) a password for the cert. Export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\eclipse.pfx\" -Password $Pwd","title":"Create a Developer Certificate"},{"location":"getting-started-ubuntu/#load-eclipse-container-image","text":"","title":"Load Eclipse Container Image"},{"location":"getting-started-ubuntu/#create-volume-folders","text":"If you have organization specific processes for creating folders, please follow those at this point. In the Home folder create a new folder named eclipse . Inside the eclipse folder, create three additional folders named logs , https , and db . Update the volume folder permissions to 777 with the chmod command.","title":"Create Volume Folders"},{"location":"getting-started-ubuntu/#store-container-image-and-cert-on-vm","text":"If the VM is connected to the internet, download the container image file Milyli shared with you to the eclipse folder. The PFX created in the previous step should be placed in the eclipse\\https directory. If the files are on a host machine and you do not already have tools for pushing files into your virtual machine, SSH is a powerful and secure way of doing so. Using the SCP PowerShell command from the host machine enables easy transfer to VM. If you are unsure of the IP address of your virtual machine, use the following command and note the Get-NetNeighbor command Get-NetNeighbor -LinkLayerAddress 00-15-5d-* and take note of it for later steps. The easiest way to make SSH requests to the VM is by installing openssh server with the terminal command sudo apt install openssh-server . For the example file transfers below, the image and PFX file have been saved on the VM host machine inn the c:\\eclipse directory. Launch PowerShell/Windows Terminal. Change the directory to c:\\eclipse . From the host machine, run the SCP command scp eclipse.pfx [username]@[ipaddress]:/home/[username]/eclipse/https . From the host machine, run the SCP command scp eclipse.server.alpha-6 [username]@[ipaddress]:/home/[username]/eclipse .","title":"Store Container Image and Cert on VM"},{"location":"getting-started-ubuntu/#load-container-image","text":"Finally, load the image into Docker Engine with the docker load command. sudo docker load -i eclipse.server.alpha-6","title":"Load Container Image"},{"location":"getting-started-ubuntu/#running-eclipse-container","text":"With the container loaded, we're ready to get it running. Replace the values of the parameters in the following command with the ones that match the work you've done in previous steps. sudo docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=[YOURPASSWORD]\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/[YOURCERTIFICATENAME].pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v /[PATHTOHTTPSFOLDER]/https:/https:ro -v /[PATHTODBFOLDER]/db:/db:rw -v /[PATHTOLOGSFOLDER]/logs:/logs:rw milyli.eclipse.server Below is an example with the values from this guide. sudo docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=eclipse\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/eclipse.pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v /home/tim/eclipse/https:/https:ro -v /home/tim/eclipse/db:/db:rw -v /home/tim/eclipse/logs:/logs:rw milyli.eclipse.server If following along, Eclipse should now be running on your VM! Navigate to https://localhost:8000/swagger/index.html on the VM to verify it's running successfully! At this point, if you followed this guide exactly as written, Eclipse should also be accessible via the host machine using the IP address: https://[IPADDRESS]:8000/swagger/index.html . Additional steps will be required of your organization's network administrator to ensure the Eclipse server visible to your Relativity instance. In order for the Eclipse Relativity Application to access the server, the agent(s) servers where the Eclipse Agent will be created must have access to the base URL of the Eclipse server.","title":"Running Eclipse Container"},{"location":"getting-started-ubuntu/#useful-commands","text":"","title":"Useful Commands"},{"location":"getting-started-ubuntu/#get-container-id","text":"sudo docker ps -a","title":"Get container Id"},{"location":"getting-started-ubuntu/#view-container-logs","text":"sudo docker logs container_id","title":"View container logs"},{"location":"getting-started-ubuntu/#stop-a-running-container","text":"sudo docker container stop container_id","title":"Stop a running container"},{"location":"getting-started-ubuntu/#running-docker-engine-rootless","text":"If needed, both Docker Engine and Eclipse can be ran rootless. Milyli provides limited technical support for this configuration beyond confirming that it is valid. We strongly suggest reading and following the official Docker documentation for doing so.","title":"Running Docker Engine Rootless"},{"location":"getting-started-windows/","text":"Hosting Eclipse w/ Docker Desktop on Windows Requirements The following requirements assume that a local server or computer will be used for initial alpha testing. A machine that can have Docker Desktop installed on it must be selected. If a different hosting infrastructure is used, this document will provide high-level details that can be adapted to your preferred solution. Milyli is available to assist in working through your preferred testing setup! Note: For more information about Docker and its related components, please refer to the official documentation . Download and install Docker Desktop with WSL 2 backend. Install using default settings, following all prompts, and restart as necessary. If using Windows Server, ensure the nested virtualization Windows feature is enabled. PowerShell 5 or greater (PowerShell 7+ suggested) Windows Terminal (Strongly suggested) Setup Create directories for container volumes Create a working Eclipse Directory (e.g. c:\\eclipse) . Create the following child directories: c:\\eclipse\\db c:\\eclipse\\https c:\\eclipse\\logs c:\\eclipse\\logs\\metrics Download the eclipse.server.alpha container image shared by Milyli and place it in the root directory. Create a developer certificate The Eclipse container requires an HTTPS certificate PFX in order to start and run. For Alpha and Beta purposes, an self-signed developer certificate can be used. If possible, a proper certificate from a validate certificate authority should be used to generate the PFX. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retained) a password for the cert. Export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\https\\eclipse.pfx\" -Password $Pwd Installation Load the docker image Open Windows Terminal. Validate that the docker command is available by using the command docker . Docker should print out usage instructions if everything is ready to go. Type the following command to load the docker image docker load -i c:\\eclipse\\eclipse.server.alpha Confirm the image is loaded by using the command docker image list . Under repository, eclipse.server should be one of the visible rows. Start the docker container With the image loaded we can now initialize the container with the docker run command. The following command provides the necessary parameters to the web server in the container to take advantage of the supplied certificate, what port to run on, and location information for the previously created physical directories that will be used for the container volumes. Ensure to replace the password with the password you set on the PFX in the previous step. docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=INSERTPFXPASSWORDHERE\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/eclipse.pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v c:\\eclipse\\https:/https:ro -v c:\\eclipse\\db:/db:rw -v c:\\eclipse\\logs:/logs:rw milyli.eclipse.server If everything is set up correctly, this will initialize the docker container and you are good to go! Testing To quickly validate that the container is up and running, the API documentation should now be available locally. Open a browser and navigate to https://localhost:8000/swagger/index.html . API documentation should load after a few moments.","title":"Windows (Docker Desktop)"},{"location":"getting-started-windows/#hosting-eclipse-w-docker-desktop-on-windows","text":"","title":"Hosting Eclipse w/ Docker Desktop on Windows"},{"location":"getting-started-windows/#requirements","text":"The following requirements assume that a local server or computer will be used for initial alpha testing. A machine that can have Docker Desktop installed on it must be selected. If a different hosting infrastructure is used, this document will provide high-level details that can be adapted to your preferred solution. Milyli is available to assist in working through your preferred testing setup! Note: For more information about Docker and its related components, please refer to the official documentation . Download and install Docker Desktop with WSL 2 backend. Install using default settings, following all prompts, and restart as necessary. If using Windows Server, ensure the nested virtualization Windows feature is enabled. PowerShell 5 or greater (PowerShell 7+ suggested) Windows Terminal (Strongly suggested)","title":"Requirements"},{"location":"getting-started-windows/#setup","text":"","title":"Setup"},{"location":"getting-started-windows/#create-directories-for-container-volumes","text":"Create a working Eclipse Directory (e.g. c:\\eclipse) . Create the following child directories: c:\\eclipse\\db c:\\eclipse\\https c:\\eclipse\\logs c:\\eclipse\\logs\\metrics Download the eclipse.server.alpha container image shared by Milyli and place it in the root directory.","title":"Create directories for container volumes"},{"location":"getting-started-windows/#create-a-developer-certificate","text":"The Eclipse container requires an HTTPS certificate PFX in order to start and run. For Alpha and Beta purposes, an self-signed developer certificate can be used. If possible, a proper certificate from a validate certificate authority should be used to generate the PFX. A developer certificate can easily be created using Windows PowerShell and the following commands. Define a certificate variable using the New-SelfSignedCertificate command. Create (and retained) a password for the cert. Export the PFX for the newly created Self Signed Certificate. $NewCert = New-SelfSignedCertificate -Type SSLServerAuthentication -DnsName localhost -CertStoreLocation Cert:\\CurrentUser\\My $Pwd = ConvertTo-SecureString -String \"eclipse\" -Force -AsPlainText Export-PfxCertificate -Cert $NewCert -FilePath \"C:\\eclipse\\https\\eclipse.pfx\" -Password $Pwd","title":"Create a developer certificate"},{"location":"getting-started-windows/#installation","text":"","title":"Installation"},{"location":"getting-started-windows/#load-the-docker-image","text":"Open Windows Terminal. Validate that the docker command is available by using the command docker . Docker should print out usage instructions if everything is ready to go. Type the following command to load the docker image docker load -i c:\\eclipse\\eclipse.server.alpha Confirm the image is loaded by using the command docker image list . Under repository, eclipse.server should be one of the visible rows.","title":"Load the docker image"},{"location":"getting-started-windows/#start-the-docker-container","text":"With the image loaded we can now initialize the container with the docker run command. The following command provides the necessary parameters to the web server in the container to take advantage of the supplied certificate, what port to run on, and location information for the previously created physical directories that will be used for the container volumes. Ensure to replace the password with the password you set on the PFX in the previous step. docker run -dt -e \"ASPNETCORE_URLS=https://+:443\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Password=INSERTPFXPASSWORDHERE\" -e \"ASPNETCORE_Kestrel__Certificates__Default__Path=/https/eclipse.pfx\" -e \"ASPNETCORE_HTTPS_PORT=443\" -p 8000:443 --name Milyli.Eclipse.Server.Web -v c:\\eclipse\\https:/https:ro -v c:\\eclipse\\db:/db:rw -v c:\\eclipse\\logs:/logs:rw milyli.eclipse.server If everything is set up correctly, this will initialize the docker container and you are good to go!","title":"Start the docker container"},{"location":"getting-started-windows/#testing","text":"To quickly validate that the container is up and running, the API documentation should now be available locally. Open a browser and navigate to https://localhost:8000/swagger/index.html . API documentation should load after a few moments.","title":"Testing"}]}